#!/usr/bin/env python3
"""
Telegram bot for "Who's the Rat?" social deduction game
Main bot entry point with command handlers
"""

import os
import logging
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from game_manager import GameManager
from config import BOT_MESSAGES, GAME_CONFIG, ADMIN_USERS, CHARACTER_TAUNTS

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize game manager
game_manager = GameManager()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ö—Ç–æ –ö—Ä—ã—Å–∞?'\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/startgame - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n"
        "/roles - –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

async def startgame_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /startgame command"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    try:
        success, message = await game_manager.start_game(chat_id, user_id, username, context)
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error starting game: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def join_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /join command"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.username or f"user_{user_id}"
    
    try:
        success, message = game_manager.join_game(chat_id, user_id, username)
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error joining game: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ.")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /status command"""
    chat_id = update.effective_chat.id
    
    try:
        status_message = game_manager.get_game_status(chat_id)
        await update.message.reply_text(status_message)
    except Exception as e:
        logger.error(f"Error getting status: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã.")

async def roles_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /roles command"""
    roles_text = (
        "üé≠ –†–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:\n\n"
        "‚Ä¢ –•–∏—Ç—Ä—ã–π –ë–∞—Ä—ã–≥–∞\n"
        "‚Ä¢ –ï–±–∞–ª—å–Ω–∏–∫ –ü–æ—è–ª—å–Ω–∏–∫\n"
        "‚Ä¢ –ß–∞–π–∫–∞ –í–∏–Ω–æ–≤–∞—Ç–∞—è\n"
        "‚Ä¢ –î–∂–∏–Ω –°–æ–ª—ë–Ω–æ–π –õ–∞–º–ø—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å—è—â–∏–π–•–∞–ø–∫—É\n"
        "‚Ä¢ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ë–ª–µ–¥–Ω—ã–º\n"
        "‚Ä¢ –ë–∞–∫–æ–ø–æ—Ä –í–Ω–µ–∑–∞–ø–Ω—ã–π\n"
        "‚Ä¢ –°–æ–±–∞–∫–∞, –°—ä–µ–≤—à–∞—è –¢–æ–≤–∞—Ä\n\n"
        "–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —Ç–∞–π–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ö—Ä—ã—Å–æ–π üêÄ"
    )
    await update.message.reply_text(roles_text)

async def vote_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle voting callback queries"""
    query = update.callback_query
    chat_id = query.message.chat_id
    voter_id = query.from_user.id
    
    try:
        data = query.data.split('_')
        if len(data) != 2 or data[0] != 'vote':
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–ª–æ—Å–∞")
            return
            
        target_id = int(data[1])
        success, message = await game_manager.cast_vote(chat_id, voter_id, target_id, context)
        
        await query.answer(message)
        
        # Check if voting is complete
        if success:
            game = game_manager.get_game(chat_id)
            if game and game.phase == "voting" and game.all_votes_cast():
                await game_manager.process_votes(chat_id, context)
                
    except Exception as e:
        logger.error(f"Error processing vote: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    help_text = (
        "üéÆ –ò–≥—Ä–∞ '–ö—Ç–æ –ö—Ä—ã—Å–∞?' - —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "üìã –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame\n"
        "2. –ò–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /join\n"
        "3. –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞\n"
        "4. –ß–∏—Ç–∞–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏ –æ–±—Å—É–∂–¥–∞–π—Ç–µ\n"
        "5. –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ\n"
        "6. –í—ã—è—Å–Ω–∏—Ç–µ, –∫—Ç–æ –∫—Ä—ã—Å–∞!\n\n"
        "üéØ –¶–µ–ª—å: –û–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –∫—Ä—ã—Å—É, –∫—Ä—ã—Å–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω–æ–π\n\n"
        "‚ö° –ö–æ–º–∞–Ω–¥—ã:\n"
        "/startgame - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "/status - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n"
        "/roles - —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã\n"
        "/closeregistration - –∑–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é"
    )
    await update.message.reply_text(help_text)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /settings command"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if chat_id not in game_manager.games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return
        
    game = game_manager.games[chat_id]
    if game.creator_id != user_id:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return
        
    if game.phase != "registration":
        await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    # Show current settings with inline keyboard
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton(f"‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {GAME_CONFIG['registration_time']}—Å", callback_data="set_reg_time")],
        [InlineKeyboardButton(f"üë• –ú–∏–Ω. –∏–≥—Ä–æ–∫–æ–≤: {GAME_CONFIG['min_players']}", callback_data="set_min_players")],
        [InlineKeyboardButton(f"üë• –ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤: {GAME_CONFIG['max_players']}", callback_data="set_max_players")],
        [InlineKeyboardButton(f"üé≠ –ü–æ–¥–∫–æ–ª—ã: {'–í–∫–ª' if GAME_CONFIG['enable_taunts'] else '–í—ã–∫–ª'}", callback_data="toggle_taunts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:",
        reply_markup=reply_markup
    )

async def close_registration_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /closeregistration command"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if chat_id not in game_manager.games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return
        
    game = game_manager.games[chat_id]
    if game.creator_id != user_id:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return
        
    if game.phase != "registration":
        await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
        return
        
    if len(game.players) < GAME_CONFIG["min_players"]:
        await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {GAME_CONFIG['min_players']}")
        return
    
    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –¥–æ—Å—Ä–æ—á–Ω–æ! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    await game_manager._start_game_phase(chat_id, context)

# Admin cheat commands (hidden)
async def admin_reveal_rat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin cheat: reveal the rat"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USERS:
        return
        
    chat_id = update.effective_chat.id
    if chat_id not in game_manager.games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return
        
    game = game_manager.games[chat_id]
    rat_player = game.get_rat_player()
    if rat_player:
        await update.message.reply_text(f"üêÄ –ö—Ä—ã—Å–∞: @{rat_player.username}")
    else:
        await update.message.reply_text("‚ùå –ö—Ä—ã—Å–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")

async def admin_skip_phase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin cheat: skip current phase"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USERS:
        return
        
    chat_id = update.effective_chat.id
    if chat_id not in game_manager.games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return
        
    game = game_manager.games[chat_id]
    if game.phase == "discussion":
        await game_manager._start_voting_phase(chat_id, context)
        await update.message.reply_text("‚è≠Ô∏è –§–∞–∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    elif game.phase == "voting":
        await game_manager.process_votes(chat_id, context)
        await update.message.reply_text("‚è≠Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def admin_end_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin cheat: force end game"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_USERS:
        return
        
    chat_id = update.effective_chat.id
    if chat_id not in game_manager.games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return
        
    game = game_manager.games[chat_id]
    game.end_game()
    await update.message.reply_text("üõë –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º")

def main():
    """Main function to run the bot"""
    # Get bot token from environment variable
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set")
        return
    
    # Create application
    application = Application.builder().token(bot_token).build()
    
    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("startgame", startgame_command))
    application.add_handler(CommandHandler("join", join_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("roles", roles_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("closeregistration", close_registration_command))
    
    # Admin cheat commands (hidden)
    application.add_handler(CommandHandler("adminrat", admin_reveal_rat))
    application.add_handler(CommandHandler("adminskip", admin_skip_phase))
    application.add_handler(CommandHandler("adminend", admin_end_game))
    
    # Add callback query handler for voting
    application.add_handler(CallbackQueryHandler(vote_callback))
    
    # Start the bot
    logger.info("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
